import styles from './my-style.module.css'

export default function Table() {
  return (
    <div className={styles.tableContainer}>
      <h2>Различия между ссылками и состоянием</h2>
      <p>
        Возможно, вы думаете, что ссылки кажутся менее «строгими», чем состояние
        — вы можете изменить их вместо того, чтобы всегда использовать функцию
        установки состояния, например. Но в большинстве случаев вы захотите
        использовать состояние. Рефы — это «аварийный люк», который вам не
        понадобится часто. Вот как сравниваются состояние и ссылки:
      </p>
      <table>
        <thead>
          <tr key="">
            <th>refs</th>
            <th>state</th>
          </tr>
        </thead>
        <tbody>
          <tr key="1">
            <td>useRef(initialValue) возвращается current: initialValue</td>
            <td>
              useState(initial Value) возвращает текущее значение переменной
              состояния и функцию установки состояния ( [value, setValue])
            </td>
          </tr>
          <tr key="2">
            <td>Не вызывает повторный рендеринг при его изменении.</td>
            <td>Запускает повторный рендеринг при его изменении.</td>
          </tr>
          <tr key="3">
            <td>
              Изменяемый — вы можете изменять и обновлять current значение вне
              процесса рендеринга.
            </td>
            <td>
              «Неизменный» — вы должны использовать функцию настройки состояния,
              чтобы изменить переменные состояния, чтобы поставить в очередь
              повторный рендеринг.
            </td>
          </tr>
          <tr key="4">
            <td>
              Вы не должны читать (или записывать) current значение во время
              рендеринга.
            </td>
            <td>
              Вы можете прочитать состояние в любое время. Однако каждый рендер
              имеет свой собственный снимок состояния, который не меняется.
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  )
}
